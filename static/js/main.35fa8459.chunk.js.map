{"version":3,"sources":["components/game/SweeperCell.js","constants/index.js","utils/index.js","components/game/SweeperGrid.js","components/game/ScoreCard.js","components/game/MineSweeper.js","components/App.js","index.js"],"names":["SweeperCell","state","isClicked","onClick","e","preventDefault","stopPropagation","props","gameOver","setState","callOnUpdate","this","onUpdate","row","col","distance","displayValue","isMine","cls","className","React","Component","generateRandomMines","counter","randomMines","random","Math","ceil","TOTAL_ROWS","String","padStart","getDistance","grid","j","i","length","cell","defGrid","cols","minesObj","rows","push","generateGrid","SweeeperGrid","updateGameOver","updateCounter","useState","setGrid","cellsClicked","setCellClicked","useEffect","newGrid","map","c","ScoreCard","remaining","remCells","style","display","justifyContent","MineSweeper","setCounter","setGameOver","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35fa8459.chunk.js","sourcesContent":["import React from \"react\";\nimport { MINE } from \"../../constants\";\n\nclass SweeperCell extends React.Component {\n  state = { isClicked: false };\n  onClick = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (this.state.isClicked || this.props.gameOver) {\n      return;\n    }\n    this.setState({ isClicked: true }, this.callOnUpdate);\n  };\n  callOnUpdate() {\n    const { onUpdate, row, col } = this.props;\n    onUpdate(row, col);\n  }\n  render() {\n    const { isClicked } = this.state;\n    const { distance = \"\", isMine } = this.props;\n    const displayValue = isMine ? MINE : distance;\n    const cls = isClicked ? \"sweeper-cell open\" : \"sweeper-cell\";\n    return (\n      <div className={cls} onClick={this.onClick}>\n        {isClicked && displayValue ? displayValue : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default SweeperCell;\n","export const TOTAL_MINES = 10;\nexport const TOTAL_ROWS = 10;\nexport const TOTAL_COLUMNS = 10;\nexport const MINE = \"âˆ…\";\nexport const MARKER = \"X\";\n","import { TOTAL_COLUMNS, TOTAL_MINES, TOTAL_ROWS } from \"../constants\";\n\nexport const generateGrid = (row, col) => {\n  const cols = [];\n  const minesObj = generateRandomMines();\n  for (let i = 0; i < row; i += 1) {\n    const rows = [];\n    for (let j = 0; j < col; j += 1) {\n      const cell = {};\n      if (minesObj[`${i}${j}`]) cell.isMine = true;\n      rows.push(cell);\n    }\n    cols.push(rows);\n  }\n  return cols;\n};\n\nconst generateRandomMines = () => {\n  //const len = Math.floor(row / col) + 1;\n  let counter = 0;\n  let randomMines = {};\n  while (counter < TOTAL_MINES) {\n    const random = Math.ceil(Math.random() * 100) - 1;\n    if (!randomMines[random] && random < TOTAL_ROWS * TOTAL_COLUMNS) {\n      randomMines[String(random).padStart(2, \"0\")] = true;\n      counter += 1;\n    }\n  }\n  return randomMines;\n};\n\nexport const getDistance = (row, col, grid) => {\n  let counter = 0;\n  for (let j = row - 1; j <= row + 1; j += 1) {\n    for (let i = col - 1; i <= col + 1; i += 1) {\n      if (i < 0 || i >= grid.length) {\n        continue;\n      }\n      const cell = grid[i][j];\n      if (cell && cell.isMine) {\n        counter += 1;\n      }\n    }\n  }\n  return counter;\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport SweeperCell from \"./SweeperCell\";\nimport { generateGrid, getDistance } from \"../../utils\";\nimport { TOTAL_ROWS, TOTAL_COLUMNS } from \"../../constants\";\n\nconst defGrid = generateGrid(TOTAL_ROWS, TOTAL_COLUMNS);\n\nfunction SweeeperGrid({ updateGameOver, gameOver, updateCounter }) {\n  const [grid, setGrid] = useState(defGrid);\n  const [cellsClicked, setCellClicked] = useState(0);\n\n  useEffect(() => {\n    updateCounter(cellsClicked);\n    // eslint-disable-next-line\n  }, [cellsClicked]);\n\n  const onUpdate = (row, col) => {\n    const newGrid = [...grid];\n    const cell = newGrid[col][row];\n    if (cell.isMine) updateGameOver(true);\n    else {\n      newGrid[col][row] = { ...cell, distance: getDistance(row, col, grid) };\n      setGrid(newGrid);\n      setCellClicked(cellsClicked + 1);\n    }\n  };\n\n  const renderGrid = (cols) => {\n    return cols.map((col, i) => {\n      return (\n        <div key={i} className=\"sweeper-cols\">\n          {col.map((c, j) => {\n            return (\n              <SweeperCell\n                key={`${i}-${j}`}\n                onUpdate={onUpdate}\n                row={j}\n                col={i}\n                gameOver={gameOver}\n                {...c}\n              />\n            );\n          })}\n        </div>\n      );\n    });\n  };\n  return <div className=\"sweeper-grid\">{renderGrid(grid)}</div>;\n}\n\nexport default SweeeperGrid;\n","import React from \"react\";\nimport { TOTAL_MINES, TOTAL_ROWS, TOTAL_COLUMNS } from \"../../constants\";\n\nconst ScoreCard = ({ remaining, gameOver }) => {\n  const remCells = TOTAL_ROWS * TOTAL_COLUMNS - remaining;\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-evenly\" }}>\n      <h2>Total Mines: {TOTAL_MINES}</h2>\n      {remCells === TOTAL_MINES && <h2>You Won! Congrats</h2>}\n      {gameOver ? (\n        <h2>Game Over! Better luck next time..!</h2>\n      ) : (\n        <h2>Remaining Cells: {remCells}</h2>\n      )}\n    </div>\n  );\n};\n\nexport default ScoreCard;\n","import React, { useState } from \"react\";\n\nimport SweeeperGrid from \"./SweeperGrid\";\nimport ScoreCard from \"./ScoreCard\";\n\nfunction MineSweeper() {\n  const [counter, setCounter] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  return (\n    <div className=\"sweeper-container\">\n      <ScoreCard remaining={counter} gameOver={gameOver} />\n      <SweeeperGrid\n        updateCounter={setCounter}\n        updateGameOver={setGameOver}\n        gameOver={gameOver}\n      />\n    </div>\n  );\n}\n\nexport default MineSweeper;\n","import React from \"react\";\nimport MineSweeper from \"./game/MineSweeper\";\n\nimport \"../styles/App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <MineSweeper />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}